form {

}
fieldset {
	@extend .group;
	padding:0;
	margin-left: 0 !important;
	margin-right: 0 !important;
	border:none;
	display: block;
}

.field {
	@extend .group;
	position: relative;
	padding-bottom: rem($line);
}

.field--check {
	label {
		@extend .group;
	}
}

legend {
	@extend .group;
}

label,
.label {

}

.req {

}

.label--error {
	position:absolute;
	left:0;
	bottom:0;
}
.error {
	color:$red;
}

//   Spoken forms are for forms that read like spoken word, e.g.:
//
//   <li class=spoken-form>
//       Hello, my <label for=spoken-name>name</label> is
//       <input type=text class=text-input id=spoken-name>. My home
//       <label for=country>country</label> is
//       <select id=country>
//           <option>UK</option>
//           <option>US</option>
//           <option>Other</option>
//       </select>
//   </li>

.spoken-form label{
	display:inline-block;
	font:inherit;
}

//    Text inputs
//
//    Instead of a `[type]` selector for each kind of form input, we just use a
//    class to target any/every one, e.g.:
//   <input type=text class=text-input>
//   <input type=email class=text-input>
//   <input type=password class=text-input>

.text-input {
	-webkit-appearance: none;
	@include transition(color,background-color 0.1s linear, max-width 1s ease);
	@include box;
	width:100%;
	outline:none;

	&:active,
	&:focus {

	}

	&.error {

	}

	+ .text-input {

	}
}

textarea{
	@extend .text-input;
	min-height: $line*6;
}

.search-form {
	position: relative;

		button {
			position:absolute;
			right:0;
			top:0;
		}
}

.search-input,
input[type=search] {
	@extend .text-input;
	overflow:hidden;

	&:focus,
	&:active {

	}
}

select {

}

input[type=file] {
	@extend .text-input;
}

//   Groups of checkboxes and radios, e.g.:
//   <li>
//       <ul class=check-list>
//           <li>
//               <input /> <label />
//           </li>
//           <li>
//               <input /> <label />
//           </li>
//       </ul>
//   </li>

.check-list{
	list-style:none;
	margin:0;
}

// Labels in check-lists
.check-label,
.check-list label,
.check-list .label{
	display:inline-block;
}


//  Extra help text displayed after a field when that field is in focus, e.g.:
//
//   <label for=email>Email:</label>
//   <input type=email class=text-input id=email>
//   <small class=extra-help>.edu emails only</small>
//
//  We leave the help text in the document flow and merely set it to
//  `visibility:hidden;`. This means that it wonâ€™t interfere with anything once
//  it reappears.


// small
.extra-help{
	display:inline-block;
	visibility:hidden;
}
.text-input:active + .extra-help,
.text-input:focus + .extra-help{
	visibility:visible;
}

// Mini forms

.form--mini {
	.field {

	}
	.check-label,
	.check-list label,
	.check-list .label{

	}
}
.form--mini .text-input,
.text-input--mini {

}
.callout--well {
	.text-input {

	}
}


@media only screen and (min-width: $screenSmall) {
	fieldset h2,
	.field {
		@include box;
		clear:both;
	}
	.field--half {
		width:$c4*2;
		float:left;

		+ .field--half {
			clear:none;

			+ .field--half {
				clear:left;
				padding-left: 0;

				+ .field--half {
					clear:none;
				}
			}
		}
	}
}
