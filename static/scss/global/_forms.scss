// FORMS

form {

}

// Let's remove some odd decisions from Normalize on fieldsets.
fieldset {
    @extend %group;
    padding:0;
    margin-left: 0 !important;
    margin-right: 0 !important;
    border:none;
    display: block;
}

// Let's wrap our fields in a field class for easier manipulation. Here's how I generally do a required text field:
//
// <div class="field">
//  <label for="field-name">Field name <sup>*<sup></label>
//  <input type="text" name="field-name" id="field-name" class="text-input" required />
// </div>

.field {
    @extend %group;
    position: relative;
    padding-bottom: rem($line);
}

// Treat checkbox fields (and any other unique field group types) slightly different
.field--check {
    label {
        @extend %group;
    }
}

legend {
    @extend %group;
}

label,
.label {

}

// Add some error styling. Keeping the labels absolutely positioned prevents them from altering the layout when visible.
.label--error {
    position:absolute;
    left:0;
    bottom:0;
}
.error {
    color:$accent;
}



//    Text inputs. Another hat tip to Inuit for the text-input class idea. http://inuitcss.com/
//
//    Instead of a `[type]` selector for each kind of form input, we just use a
//    class to target any/every one, e.g.:
//   <input type="text" class="text-input" />
//   <input type="email" class="text-input" />
//   <input type="password" class="text-input" />

.text-input {
    -webkit-appearance: none;
    @include placeholder-color($text);
    width:100%;
    outline:none;

    &:active,
    &:focus {

    }

    &.error {

    }
}

textarea {
    @extend .text-input;
    min-height: $line*6;
}

.search-input,
input[type=search] {
    @extend .text-input;
    overflow:hidden;

    &:focus,
    &:active {

    }
}

select {

}

input[type=file] {
    @extend .text-input;
}


// Labels in check-lists
.check-label,
.field--check label,
.field--check .label{
    display:inline-block;
}
.check-list {
    list-style: none;
}
input[type=checkbox],
input[type=radio] {
    margin-right: 0.5em;
}

//  Extra help text displayed after a field when that field is in focus, e.g.:
//
//   <label for=email>Email:</label>
//   <input type=email class=text-input id=email>
//   <small class=extra-help>.edu emails only</small>
//
//  We leave the help text in the document flow and merely set it to
//  `visibility:hidden;`. This means that it wonâ€™t interfere with anything once
//  it reappears.


// small
.extra-help{
    display:inline-block;
    visibility:hidden;
}
.text-input:active + .extra-help,
.text-input:focus + .extra-help{
    visibility:visible;
}

// Modified forms
.form--mini {
    .field {

    }
    .text-input {

    }
}

// Inline forms are good for embedding fields in text. Another hat tip to Inuit. http://inuitcss.com/
//
// <div class="form--inline">
//  <p>Yo Jeeves, the <label for="name">name</label> is
//      <input type="text" class="text-input" id="name" />. My
//      <label for="drink">drink of choice</label> is
//      <select id="drink">
//              <option>Bourbon</option>
//          <option>Vodka</option>
//          <option>Gin</option>
//      </select>.</p>
// </div>

.form--inline {
    label {
        display:inline-block;
        font:inherit;
    }
}

// Not all fields need to be full width. Here are some field building blocks
// I'm kicking these in at a wider screen, but make some for mobile. If you dare. ;)
@media only screen and (min-width: $screenSmall) {
    .field--half,
    .field--third,
    .field--two-third {
        float:left;
        padding:0;
    }
    .field--half {
        width:$c4*2;
    }
    .field--third {
        width:$c3;
    }
    .field--two-third {
        width:$c3*2;
    }
}
