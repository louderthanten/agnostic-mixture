//MIXINS

//Setup Variables for Mixins. Don't touch!
$root-n: 16;
$root: $root-n * 1px;
$em: $base * 1;

// Rem calculator for font sizes and line heights
@mixin font-size($px_value: $base, $baseline: $line-n) {
    $baseline_rem: ($root-n / 1rem);
    font-size: ($px_value * 1px);
    font-size: $px_value / $baseline_rem;
    line-height: ($baseline / $px_value);
}

// Adjust Placeholder colors
@mixin placeholder-color($color) {
    &::-webkit-input-placeholder { /* Safari, Chrome */
        color: $color;
    }
    &:-moz-placeholder { /* Firefox 4â€“18 */
        color: $color;
    }
    &::-moz-placeholder { /* Firefox 19+ */
        color: $color;
    }
    &:-ms-input-placeholder { /* IE 10+ */
        color: $color;
    }
}

// Supply @2x background images to browsers that support background-size
@mixin image-2x($image, $width, $height) {
    @media (min--moz-device-pixel-ratio: 1.3),
                 (-o-min-device-pixel-ratio: 2.6/2),
                 (-webkit-min-device-pixel-ratio: 1.3),
                 (min-device-pixel-ratio: 1.3),
                 (min-resolution: 1.3dppx) {
        /* on retina, use image that's scaled by 2 */
        background-image: url($image);
        background-size: $width $height;
    }
}

// Generic REM Mixin if you need px fallbacks
@mixin rem($property, $px-values) {
    // Convert the baseline into rems
    $baseline-rem: $root / 1rem;
    // Print the first line in pixel values
    #{$property}: $px-values;
    // If there is only one (numeric) value, return the property/value line for it.
    @if type-of($px-values) == "number" {
        #{$property}: $px-values / $baseline-rem; }
    @else {
        // Create an empty list that we can dump values into
        $rem-values: unquote("");
        @each $value in $px-values {
            // If the value is zero, return 0
            @if $value == 0 {
                $rem-values: append($rem-values, $value); }
            @else {
                $rem-values: append($rem-values, $value / $baseline-rem); } }
        // Return the property and its list of converted values
        #{$property}: $rem-values; }
}

// CSS Triangles
@mixin cssTriangle($triangleSize, $triangleColor, $triangleDirection) {
    @include rem(border-width,$triangleSize);
    content: "";
    display: block;
    width: 0;
    height: 0;
    border-style: solid;

    @if ($triangleDirection == top) {
        border-color: $triangleColor transparent transparent transparent;
    }
    @if ($triangleDirection == bottom) {
        border-color: transparent transparent $triangleColor transparent;
    }
    @if ($triangleDirection == left) {
        border-color: transparent transparent transparent $triangleColor;
    }
    @if ($triangleDirection == right) {
        border-color: transparent $triangleColor transparent transparent;
    }
    // .example { @include css-triangle(5px, #fff, bottom); }
}




// Apply gutters to layout elements
@mixin gutter {
    @include rem(padding-left, $line/2);
    @include rem(padding-right, $line/2);
}

// Apply box-sizing to layout elements
@mixin box {
    -webkit-box-sizing: border-box;
        -moz-box-sizing: border-box;
           -o-box-sizing: border-box;
               box-sizing: border-box;
}

// Apply both box-sizing & gutters to in one mixin
@mixin wrap {
    @include rem(padding-left, $line/2);
    @include rem(padding-right, $line/2);
    -webkit-box-sizing: border-box;
         -moz-box-sizing: border-box;
         -o-box-sizing: border-box;
            box-sizing: border-box;
}


// From Inuit CSS http://inuitcss.com
// Force overly long spans of text to truncate, e.g.:
// `@include truncate(100%);`
//
// Where `$truncation-boundary` is a united measurement.
@mixin truncate($truncation-boundary){
        max-width:$truncation-boundary;
        white-space:nowrap;
        overflow:hidden;
        text-overflow:ellipsis;
}
